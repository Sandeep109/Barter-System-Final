{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"G:\\\\barter-app-stage-13-master\\\\screens\\\\NotificationsScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ListItem, Icon } from 'react-native-elements';\nimport firebase from 'firebase';\nimport MyHeader from \"../components/MyHeader\";\nimport SwipeableFlatlist from \"../components/SwipeableFlatlist\";\nimport db from \"../config\";\n\nvar NotificationScreen = function (_Component) {\n  _inherits(NotificationScreen, _Component);\n\n  var _super = _createSuper(NotificationScreen);\n\n  function NotificationScreen(props) {\n    var _this;\n\n    _classCallCheck(this, NotificationScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getNotifications = function () {\n      console.log(_this.state.userId);\n      _this.notificationRef = db.collection(\"all_notifications\").where(\"notification_status\", \"==\", \"unread\").where(\"targeted_user_id\", '==', _this.state.userId).onSnapshot(function (snapshot) {\n        var allNotifications = [];\n        snapshot.docs.map(function (doc) {\n          var notification = doc.data();\n          notification[\"doc_id\"] = doc.id;\n          allNotifications.push(notification);\n        });\n\n        _this.setState({\n          allNotifications: allNotifications\n        });\n      });\n    };\n\n    _this.keyExtractor = function (item, index) {\n      return index.toString();\n    };\n\n    _this.renderItem = function (_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      return React.createElement(ListItem, {\n        key: index,\n        title: item.item_name,\n        titleStyle: {\n          color: 'black',\n          fontWeight: 'bold'\n        },\n        subtitle: item.message,\n        bottomDivider: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      });\n    };\n\n    _this.state = {\n      userId: firebase.auth().currentUser.email,\n      allNotifications: []\n    };\n    _this.notificationRef = null;\n    return _this;\n  }\n\n  _createClass(NotificationScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getNotifications();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.notificationRef();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 0.1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, React.createElement(MyHeader, {\n        title: \"Notifications\",\n        navigation: this.props.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 0.9\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, this.state.allNotifications.length === 0 ? React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/Notification.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: {\n          fontSize: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }, \"You have no notifications\")) : React.createElement(SwipeableFlatlist, {\n        allNotifications: this.state.allNotifications,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      })));\n    }\n  }]);\n\n  return NotificationScreen;\n}(Component);\n\nexport { NotificationScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["G:/barter-app-stage-13-master/screens/NotificationsScreen.js"],"names":["React","Component","ListItem","Icon","firebase","MyHeader","SwipeableFlatlist","db","NotificationScreen","props","getNotifications","console","log","state","userId","notificationRef","collection","where","onSnapshot","snapshot","allNotifications","docs","map","doc","notification","data","id","push","setState","keyExtractor","item","index","toString","renderItem","item_name","color","fontWeight","message","auth","currentUser","email","styles","container","flex","navigation","length","justifyContent","alignItems","require","fontSize","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StyleSheet, View, FlatList,Text,Image } from 'react-native';\nimport { ListItem, Icon } from 'react-native-elements';\nimport firebase from 'firebase';\nimport MyHeader from '../components/MyHeader';\nimport SwipeableFlatlist from '../components/SwipeableFlatlist';\nimport db from '../config';\n\nexport default class NotificationScreen extends Component{\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userId :  firebase.auth().currentUser.email,\n      allNotifications : []\n    };\n\n    this.notificationRef = null\n  }\n\n  getNotifications=()=>{\n    console.log(this.state.userId)\n    this.notificationRef = db.collection(\"all_notifications\")\n    .where(\"notification_status\", \"==\", \"unread\")\n    .where(\"targeted_user_id\",'==',this.state.userId)\n    .onSnapshot((snapshot)=>{\n      var allNotifications =  []\n      snapshot.docs.map((doc) =>{\n        var notification = doc.data()\n        notification[\"doc_id\"] = doc.id\n        allNotifications.push(notification)\n      });\n      this.setState({\n          allNotifications : allNotifications\n      });\n    })\n  }\n\n  componentDidMount(){\n    this.getNotifications()\n  }\n\n  componentWillUnmount(){\n    this.notificationRef()\n  }\n\n  keyExtractor = (item, index) => index.toString()\n\n  renderItem = ({item,index}) =>{\n      return (\n        <ListItem\n          key={index}\n          title={item.item_name}\n          titleStyle={{ color: 'black', fontWeight: 'bold' }}\n          subtitle={item.message}\n          bottomDivider\n        />\n      )\n }\n\n\n  render(){\n    return(\n      <View style={styles.container}>\n        <View style={{flex:0.1}}>\n          <MyHeader title={\"Notifications\"} navigation={this.props.navigation}/>\n        </View>\n        <View style={{flex:0.9}}>\n          {\n            this.state.allNotifications.length === 0\n            ?(\n              <View style={{flex:1, justifyContent:'center', alignItems:'center'}}>\n                <Image source={require('../assets/Notification.png')}/>\n                <Text style={{fontSize:25}}>You have no notifications</Text>\n              </View>\n            )\n            :(\n              <SwipeableFlatlist allNotifications={this.state.allNotifications}/>\n            )\n          }\n        </View>\n      </View>\n    )\n  }\n}\n\n\nconst styles = StyleSheet.create({\n  container : {\n    flex : 1\n  }\n})\n"]},"metadata":{},"sourceType":"module"}